






























#file Library1 ? /mnt/f/files/EnderCommunity/Projects/Stark/libraries/Library1.stark
0x000001;

variable:int tn = 1;
0x000001;
#endfile
             

#file Test.Library2 ? /mnt/f/files/EnderCommunity/Projects/Stark/libraries/Test/Library2.stark
0x000002;

variable:int tn = 2;
0x000002;
#endfile
                  

#file Test.More.Library3 ? /mnt/f/files/EnderCommunity/Projects/Stark/libraries/Test/More/Library3.stark
0x000003;

variable:int tn = 2;
0x000003;
#endfile
                       



#file ./file.stark ? /mnt/f/files/EnderCommunity/Projects/Stark/tests/file.stark
0x100000;

variable:bool isFile = true;
0x100000;
#endfile
                      





exit 0;











variable:int a;
function<void> MyFunction(var1:double, var2:short:int);
              

    a = 0;

    void MyFunction(double var1, short int var2){

        

    }

 





execute Main;





define ZERO 0; 



%%SYSTEM%%;


function<int> Main(myVariable:int, myVariable2:bool){

    
    variable:int a = 0, b = 1;
    

    
    constant:int c = 0;

    
    variable:int[,] d = new int(10, 10);
    d[0, 0] = 1;

    
    delete a, b, d;

    

    
    if(true){

        return 1;

    }else if(false){

        return 0;

    }else{

        
        

    }

}





condition Platform {

    Win: true,
    Linux: true;

}






@Platform::Win
function<void> SystemRelatedFunction(){

    

}


@Platform::Linux
function<void> SystemRelatedFunction(){

    

}

function<void> MyFunction(...args){

    

}




class MyCustomObject {

    
    
    

    variable:int a;
    variable:string b;

    append function<void> MyFunction(){

        

    }

    function<void> MyFunction2(){

        

    }

    
    constructor(a:int, b:string) {

        
        this.a = a;
        this.b = b;

    }

}

variable:MyCustomObject name = new MyCustomObject(0, "");

class MyClass {

    append function<void> MyFunction(){

        

    }

}

MyClass.MyFunction();






get { Console } from System.IO;
get System.IO;
