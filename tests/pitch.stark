// StarkScript (0)


// Import libraries (no real libraries are going to be included in the first version of
// StarkScript)
use system.io;
use system.info;

// Import files
import "file.stark";
import "file.stark" with prefix Duplicate1; // (You will have to do "Duplicate1->" to access
                                            // variables and functions from this file)

// Pass the name of the function that the compiler should run at runtime!
start Main;

fileVariable; // from the first import
Duplicate1->fileVariable; // from the second import

// Define constants in the preprocessor
define ZERO 0; // You can use the `define` function to define a constant

// There will be some compiler constant. All the compiler constants will be accessible like
// this: %NAME%
%BINARY_HASH%; // The hash of the final binary file (just an example, not gonna be really
               // included)

function<int> Main(myVariable:int, myVariable2:bool){

    // Define some variables of the type "int"
    variable:int a = 0, b = 1;

    // Define a constant
    constant:int c = 0;

    // Define an array
    variable:int[,] d = new int(10, 10);
    d[0, 0] = 1;

    // You can only delete variables
    delete a, b, d;

}


// StarkScript (1)

class MyCustomObject {

    // All variables and functions (except for the `constructor`) are set to
    // "private" mode by default. If you want a variable or a function to be
    // accessible outside the class, you need to use the "append" keyword!

    variable:int a;
    variable:string b;

    append function<void> myFunction(){

        //

    }

    function<void> myFunction2(){

        //

    }

    // Define a constructor
    constructor(a:int, b:string) {

        // Do stuff...
        this.a = a;
        this.b = b;

    }

}

variable:MyCustomObject name = new MyCustomObject(0, "");

class MyClass {

    append function<void> myFunction(){

        //

    }

}

MyClass.myFunction();