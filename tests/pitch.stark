// StarkScript (0)
// StarkScript 0 will include the following features:
//   - [ ] Including files
//   - [ ] Including libraries
//   - [ ] Defining functions
//   - [ ] Defining variables
//         - [ ] int
//         - [ ] double
//         - [ ] float
//         - [ ] bool
//         - [ ] char
//         - [ ] string
//   - [ ] The `delete` keyword
//         - [ ] for ints
//         - [ ] for doubles
//         - [ ] for floats
//         - [ ] for booleans
//         - [ ] for chars
//         - [ ] for strings
//   - [ ] Defining constants
//   - [ ] Injecting C code within your Stark files
//   - [ ] The `exit` keyword
//   - [ ] The `execute` keyword
//   - [ ] The `define` keyword
//   - [ ] Compiler variables (%%VAR%%)
//   - [ ] Conditions


// Import libraries (no real libraries are going to be included in the first version of
// StarkScript)
// use system.io;
// use system.info;

// Import files
import "./file.stark";
// import "file.stark" prefix Duplicate1; // (You will have to do "Duplicate1->" to access
//                                             // variables and functions from this file)
//                                             // Note: this is a bad idea!

// You can terminate the program using the "exit" keyword
exit 0;

// You can use the "intermediate" keyword to tell the compiler that the code-block that follows it
// will be written in the intermediate programming language that the compiler uses to compile Stark.
// (The compiler uses C as an intermediate programming language, so you need to include pure C
// code inside this code-block)
// Note that this is a temporary feature in Stark. It will be removed when the language is near
// completion!
// Also, the Stark compiler will not check if the C code is valid! You need to make sure that
// it is valid by yourself!
// You could try to give the compiler a hint about the existence of a function or a variable inside
// this C code-block by doing something like this:
variable:int a;
function<void> MyFunction(var1:double, var2:short:int);
intermediate {

    a = 0;

    void MyFunction(double var1, short int var2){

        // ...

    }

}

// Pass the name of the function that the compiler should run at runtime!
// By default, the function that the compiler will look for is a function with the name "Main".
// But, if you wish to use the name of another function, you can tell the compiler to run that
// other function using the "execute" keyword!
execute Main;

// fileVariable; // from the first import
// Duplicate1->fileVariable; // from the second import

// Define constants in the preprocessor (c preprocessor constants)
define ZERO 0; // You can use the `define` function to define a constant

// There will be some compiler constants. All the compiler constants will be accessible like
// this: %%NAME%%
%%SYSTEM%%;

// The start function
function<int> Main(myVariable:int, myVariable2:bool){

    // Define some variables of the type "int"
    variable:int a = 0, b = 1;
    // variable a:int = 0, b:int = 1; // You could also do this...

    // Define a constant
    constant:int c = 0;

    // Define an array
    variable:int[,] d = new int(10, 10);
    d[0, 0] = 1;

    // You can only delete variables
    delete a, b, d;

    // bool double float int string char short long void

    // Conditions
    if(true){

        return 1;

    }else if(false){

        return 0;

    }else{

        // Ye, IDK, I just need to write some random conditions...
        // Never do that...

    }

}


// StarkScript (1)

// Define a block-condition
condition Platform {

    Win: true,
    Linux: true;

}

// Block-conditions can be only used on code blocks!
// The compiler will assume that all that comes after the condition line is a part of the code
// block. - Code blocks are chunks of code that are between curly brackets ({}) -

// Define this version of the `SystemRelatedFunction` function for Windows
@Platform::Win
function<void> SystemRelatedFunction(){

    // ...

}

// Define this version of the `SystemRelatedFunction` function for Linux-based systems
@Platform::Linux
function<void> SystemRelatedFunction(){

    // ...

}

function<void> MyFunction(...args){

    // ...

}


// StarkScript (2)

class MyCustomObject {

    // All variables and functions (except for the `constructor`) are set to
    // "private" mode by default. If you want a variable or a function to be
    // accessible outside the class, you need to use the "append" keyword!

    variable:int a;
    variable:string b;

    append function<void> MyFunction(){

        //

    }

    function<void> MyFunction2(){

        //

    }

    // Define a constructor
    constructor(a:int, b:string) {

        // Do stuff...
        this.a = a;
        this.b = b;

    }

}

variable:MyCustomObject name = new MyCustomObject(0, "");

class MyClass {

    append function<void> MyFunction(){

        //

    }

}

MyClass.MyFunction();