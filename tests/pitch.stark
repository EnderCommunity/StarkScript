// StarkScript (0)


// Import libraries (no real libraries are going to be included in the first version of
// StarkScript)
use system.io;
use system.info;

// Import files
import "file.stark";
// import "file.stark" prefix Duplicate1; // (You will have to do "Duplicate1->" to access
//                                             // variables and functions from this file)
//                                             // Note: this is a bad idea!

// Pass the name of the function that the compiler should run at runtime!
// By default, the function that the compiler will look for is a function with the name "Main".
// But, if you wish to use the name of another function, you tell the compiler to run that other
// function using the "start" keyword!
start Main;

// fileVariable; // from the first import
// Duplicate1->fileVariable; // from the second import

// Define constants in the preprocessor (c preprocessor constants)
define ZERO 0; // You can use the `define` function to define a constant

// There will be some compiler constants. All the compiler constants will be accessible like
// this: %%NAME%%
%%SYSTEM%%;

// The start function
function<int> Main(myVariable:int, myVariable2:bool){

    // Define some variables of the type "int"
    variable:int a = 0, b = 1;

    // Define a constant
    constant:int c = 0;

    // Define an array
    variable:int[,] d = new int(10, 10);
    d[0, 0] = 1;

    // You can only delete variables
    delete a, b, d;

    // bool double float int string char short long void

}


// StarkScript (1)

// Define a block-condition
condition Platform {

    win: true,
    Linux: true

}

// Block-conditions can be only used on code blocks!
// The compiler will assume that all that comes after the condition line is a part of the code
// block. - Code blocks are chunks of code that are between curly brackets ({}) -

// Define this version of the `SystemRelatedFunction` function for Windows
@Platform::Win
function<void> SystemRelatedFunction(){

    // ...

}

// Define this version of the `SystemRelatedFunction` function for Linux-based systems
@Platform::Linux
function<void> SystemRelatedFunction(){

    // ...

}

function<void> MyFunction(...args){

    // ...

}


// StarkScript (2)

class MyCustomObject {

    // All variables and functions (except for the `constructor`) are set to
    // "private" mode by default. If you want a variable or a function to be
    // accessible outside the class, you need to use the "append" keyword!

    variable:int a;
    variable:string b;

    append function<void> MyFunction(){

        //

    }

    function<void> MyFunction2(){

        //

    }

    // Define a constructor
    constructor(a:int, b:string) {

        // Do stuff...
        this.a = a;
        this.b = b;

    }

}

variable:MyCustomObject name = new MyCustomObject(0, "");

class MyClass {

    append function<void> MyFunction(){

        //

    }

}

MyClass.MyFunction();